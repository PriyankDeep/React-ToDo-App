{"version":3,"sources":["TodoListItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoListItems","props","tempDate","Date","currDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","items","map","item","className","key","icon","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteToDoItem","staggerDelayBy","appearAnimation","enterAnimation","leaveAnimation","library","add","faTimes","faCalendarAlt","App","state","currentItem","addTodoItem","bind","toDohandleInput","preventDefault","newItem","this","setState","now","filteredItems","filter","console","log","onSubmit","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6e28641a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TodoListItems.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction TodoListItems(props) {\r\n  var tempDate = new Date();\r\n  var date =\r\n    tempDate.getFullYear() +\r\n    \"-\" +\r\n    (tempDate.getMonth() + 1) +\r\n    \"-\" +\r\n    tempDate.getDate() +\r\n    \" \" +\r\n    tempDate.getHours() +\r\n    \":\" +\r\n    tempDate.getMinutes() +\r\n    \":\" +\r\n    tempDate.getSeconds();\r\n  const currDate = \" - \" + date;\r\n\r\n  const items = props.items;\r\n  const TodoListItems = items.map((item) => {\r\n    return (\r\n      <div className=\"list\" key={item.key}>\r\n        <p>\r\n          <FontAwesomeIcon className=\"faIcons-calendar\" icon=\"calendar-alt\" />\r\n          <input\r\n            type=\"text\"\r\n            id={item.key}\r\n            value={item.text}\r\n            onChange={(e) => {\r\n              props.setUpdate(e.target.value, item.key);\r\n            }}\r\n          />\r\n          <span>\r\n            <p className=\"date\">{currDate}</p>\r\n          </span>\r\n\r\n          <span>\r\n            <FontAwesomeIcon\r\n              className=\"faIcons\"\r\n              onClick={() => {\r\n                props.deleteToDoItem(item.key);\r\n              }}\r\n              icon=\"times\"\r\n            />\r\n          </span>\r\n        </p>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <FlipMove\r\n        staggerDelayBy={150}\r\n        appearAnimation=\"accordionVertical\"\r\n        enterAnimation=\"fade\"\r\n        leaveAnimation=\"fade\"\r\n      >\r\n        {TodoListItems}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoListItems;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoListItems from \"./TodoListItems\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCalendarAlt } from \"@fortawesome/free-solid-svg-icons\";\nlibrary.add(faTimes, faCalendarAlt);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n    this.addTodoItem = this.addTodoItem.bind(this);\n    this.toDohandleInput = this.toDohandleInput.bind(this);\n    this.deleteToDoItem = this.deleteToDoItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n  addTodoItem(e) {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if (newItem.text !== \"\") {\n      const items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem: {\n          text: \"\",\n          key: \"\",\n        },\n      });\n    }\n  }\n  toDohandleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now(),\n      },\n    });\n  }\n  deleteToDoItem(key) {\n    const filteredItems = this.state.items.filter((item) => item.key !== key);\n    this.setState({\n      items: filteredItems,\n    });\n  }\n  setUpdate(text, key) {\n    console.log(\"items:\" + this.state.items);\n    const items = this.state.items;\n    items.map((item) => {\n      if (item.key === key) {\n        console.log(item.key + \"    \" + key);\n        item.text = text;\n      }\n    });\n    this.setState({\n      items: items,\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"todotext\">\n            Write your\n            <br />\n            <span>To do list</span>\n          </div>\n\n          <form id=\"form-to-do\" onSubmit={this.addTodoItem}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter your task\"\n              value={this.state.currentItem.text}\n              onChange={this.toDohandleInput}\n            ></input>\n            <button className=\"submit-button\" type=\"submit\">\n              Add\n            </button>\n            <button\n              className=\"clear-button\"\n              type=\"submit\"\n              onClick={this.deleteToDoItem}\n            >\n              Clear\n            </button>\n          </form>\n        </header>\n        <div className=\"bottom\">\n          <p>{this.state.items.text}</p>\n\n          <TodoListItems\n            items={this.state.items}\n            deleteToDoItem={this.deleteToDoItem}\n            setUpdate={this.setUpdate}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}